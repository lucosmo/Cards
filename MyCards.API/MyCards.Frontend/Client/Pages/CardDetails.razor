@page "/card/{CardId}"

@inject HttpClient client

<h3>CardDetails</h3>

@if (Error != null)
{
    <p><em>You have provided incorrect CardId</em></p>
}
else if (CardData != null)
{
    <div class="container text-center col-md-4">
        <div class="card">
            @if (!string.IsNullOrEmpty(CardData.FileUrl))
            {
                <img src="@CardData.FileUrl" alt="Obrazek" class="card-img-top img-thumbnail rounded" style="max-height: 100%; object-fit: cover;" />
            }
            <div class="card-body text-center">
                <h5 class="card-text">Title: @CardData.Title</h5>
                <p class="card-text">CreatedAt: @CardData.CreatedAt</p>
            </div>
        </div>
        <a href="/cards" class="btn btn-primary mb-3">Back to list of cards</a>
    </div>
    <table class="table">
        <tr>
            <td>Title: </td>
            <td>@CardData.Id</td>
            <td>@CardData.Title</td>
            <td>@CardData.FileReference</td>
            <td>@CardData.CreatedAt</td>
            <td>@CardData.FileLinked</td>
        </tr>
    </table>
}
else
{
    <p><em>There is no card with provided CardID</em></p>
}

@code {
    [Parameter]
    public string CardId { get; set; } = null!;
    public string? Error { get; set; }
    public CardData? CardData { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(CardId))
        {
            Error = "CardId shouldn't be empty/null";
        }
        else if (int.TryParse(CardId, out var parsedCardId))
        {
            var response = await client.GetFromJsonAsync<CardData>($"Card/{parsedCardId}");
            CardData = response;
            StateHasChanged();
        }
        else
        {
            Error = $"CardId should be an intiger.";
        }
    }
}
